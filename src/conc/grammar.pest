WHITESPACE = _{ (" " | "\t" | "\n")+ }
COMMENT    = _{ "#" ~ (!("\n" | EOI) ~ ANY)* ~ ("\n" | EOI) }

statement_list = { statement* }

program = _{ SOI ~ statement_list ~ EOI }

true  = { "true" }
false = { "false" }

drop         = { "drop" }
dup          = { "dup" }
over         = { "over" }
add          = { "+" }
sub          = { "-" }
mul          = { "*" }
less_than    = { "<" }
greater_than = { ">" }
mod          = { "%" }
equals       = { "=" }
not_equals   = { "!=" }
not          = { "not" }
or           = { "or" }

puts  = { "puts" }
putc  = { "putc" }
debug = { "debug" }
rot   = { "rot" }

break = { "break" }

intrinsic = _{
    drop
  | dup
  | over
  | rot
  | debug
  | add
  | sub
  | mul
  | mod
  | equals
  | not_equals
  | less_than
  | greater_than
  | or
  | puts
  | putc
  | break
  | true
  | false
}

BLOCK_TERMINATOR = _{ "end" }

integer = @{ (ASCII_NONZERO_DIGIT ~ (ASCII_DIGIT)*) | "0" }

escape_target = !{ "n" | "r" | "t" | "\"" | "\'" | "\\" }

escaped_character = _{ "\\" ~ escape_target }

raw_string       = @{ raw_character+ }
string_internals = _{ (escaped_character | raw_string)* }

// https://github.com/pest-parser/book/blob/master/src/examples/rust/literals.md#strings
string = ${ "\"" ~ string_internals ~ "\"" }

raw_character       =  { (!("\\" | "\"") ~ ANY) }
character_internals = _{ escaped_character | raw_character }
character           = ${ "\'" ~ character_internals ~ "\'" }

loop_st =  { "loop" ~ statement_list ~ BLOCK_TERMINATOR }
else_st = _{ "else" ~ statement_list }
if_st   =  { "if" ~ statement_list ~ (else_st)? ~ BLOCK_TERMINATOR }

while_st = { "while" ~ statement_list ~ "do" ~ statement_list ~ BLOCK_TERMINATOR }

func_call = ${ "!" ~ identifier }

identifier = @{ LOWERCASE_LETTER ~ (ASCII_ALPHANUMERIC | "_")* }

builtin_type =  { "u8" | "u64" | "bool" | "ptr" }
data_type    = _{ builtin_type }

stack_descripcion = { "|" ~ data_type* ~ "|" }

function = { "fn" ~ identifier ~ stack_descripcion ~ ("->" ~ stack_descripcion)? ~ "do" ~ statement_list ~ BLOCK_TERMINATOR }

statement = _{ integer | string | character | intrinsic | loop_st | while_st | if_st | function | func_call }
